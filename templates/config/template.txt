package ${basepackage}.config;

#license

import ${basepackage}.config.AbstractAppConfig;

#importServices

import com.jolbox.bonecp.BoneCPDataSource;
import org.hibernate.ejb.HibernatePersistence;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

import javax.annotation.Resource;
import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableJpaRepositories(basePackages = "${basepackage}.repository")
@ComponentScan(basePackages = "${basepackage}")
@PropertySource("classpath:/${propertiesFileName}")
public class PersistenceConfig extends AbstractAppConfig {

    /*
        To have these values populate properly, create a properties file in your classpath
        that has each property assigned by the value contained in the @Value annotation,
        i.e., db.username=my.db.username
    */
    private @Value("hibernate.dialect") String HIBERNATE_DIALECT;
    private @Value("hibernate.show.sql") String HIBERNATE_SHOW_SQL;
    private @Value("entitymanager.packages.to.scan") String ENTITYMANAGER_PACKAGES_TO_SCAN;

    private @Value("db.driver") String DATABASE_DRIVER;
    private @Value("db.username") String DATABASE_USERNAME;
    private @Value("db.password") String DATABASE_PASSWORD;
    private @Value("db.url") String DATABASE_URL;

    @Resource
    private Environment environment;

    
    @Override
    @Bean
    public DataSource dataSource() {
        BoneCPDataSource dataSource = new BoneCPDataSource();
        dataSource.setDriverClass(environment.getRequiredProperty(DATABASE_DRIVER));
        dataSource.setJdbcUrl(environment.getRequiredProperty(DATABASE_URL));
        dataSource.setUsername(environment.getRequiredProperty(DATABASE_USERNAME));
        dataSource.setPassword(environment.getRequiredProperty(DATABASE_PASSWORD));
        return dataSource;
    }

    @Override
    @Bean
    public JpaTransactionManager transactionManager() {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());
        return transactionManager;
    }

    @Override
    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();

        entityManagerFactoryBean.setDataSource(dataSource());
        entityManagerFactoryBean.setPackagesToScan(new String[]{environment.getRequiredProperty(ENTITYMANAGER_PACKAGES_TO_SCAN)});

        final HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();

        entityManagerFactoryBean.setJpaVendorAdapter(vendorAdapter);
        entityManagerFactoryBean.setPersistenceProviderClass(HibernatePersistence.class);
        entityManagerFactoryBean.setJpaProperties(hibernateProperties());

        return entityManagerFactoryBean;
    }

    @Override
    public Properties hibernateProperties() {
        Properties hibernateProperties = new Properties();
        hibernateProperties.put(HIBERNATE_DIALECT, environment.getRequiredProperty(HIBERNATE_DIALECT));
        hibernateProperties.put(HIBERNATE_SHOW_SQL, environment.getRequiredProperty(HIBERNATE_SHOW_SQL));
        return hibernateProperties;
    }

    #serviceBeanDefs
}
